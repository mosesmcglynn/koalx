from io import BytesIO
import requests
import os
from PIL import Image
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
import tempfile
from urllib.request import urlopen
from PIL import ImageFile

divider = "".center(50, '-').center(52, '+')
title = "Manga Panels Scraper".center(50).center(52, '|')
title_banner = f'{divider}\n{title}\n{divider}'


def startProgram():
    print("\033[0H\033[0J")
    choicesList = ['Enter Link', 'Exit']
    choices = ''
    for i in choicesList:
        choices += f'[{choicesList.index(i) + 1}] - {i}'.ljust(50).center(52, '|')
        if i != choicesList[-1]:
            choices += '\n'
    print(title_banner, choices, divider, sep='\n')
    while True:
        theChoice = input('Enter your choice: ')
        match theChoice:
            case '1':
                return startScraping()
            case '4':
                return
            case _:
                continue


def startScraping():
    print("\033[0H\033[0J")
    print(title_banner)
    link = input('Enter your link: ')
    response = requests.get(link)
    content = response.text
    cur_chapter = content.split('vm.CurChapter = ')[1].split(';')[0]
    index_name = content.split('vm.IndexName = "')[1].split('";')[0]
    cur_path_name = content.split('vm.CurPathName = "')[1].split('";')[0]
    chapter = cur_chapter.split('"Chapter":"')[1].split('"')[0]
    if chapter[-1] == '0':
        chapter = chapter[1:-1]
    else:
        chapter = int(chapter[1:]) / 10.0
    pages = cur_chapter.split('"Page":"')[1].split('"')[0]

    generatePDF(f'{pages}', cur_path_name, f'{index_name}', chapter)


def generatePDF(pages, cur_path_name, index_name, chapter):
    c = canvas.Canvas(f'Manga-Panels/{index_name}/{chapter}.pdf', pagesize=A4)
    for i in range(1, int(pages)+1):
        link = f'https://{cur_path_name}/manga/{index_name}/{chapter}-{("0" * (3 - len(str(i)))) + str(i)}.png'
        try:
            response = requests.get(link)
            response.raise_for_status()  # Check if the request was successful

            if not os.path.exists(f'Manga-Panels/{index_name}'):
                os.makedirs(f"Manga-Panels/{index_name}")
                '''if not os.path.exists(f'/{index_name}/{chapter}.pdf'):
                    open(f'/{index_name}/{chapter}.pdf', 'x')'''
            #with open(f'/{index_name}/{chapter}.pdf', 'wb') as file:
            image_bytes = response.content
            temp_image = tempfile.NamedTemporaryFile(suffix=".png", delete=False)
            temp_image.write(image_bytes)
            temp_image.close()
            image = Image.open(temp_image.name)

            page_width, page_height = A4

            # Get the dimensions of the image
            image_width, image_height = image.size

            # Calculate the scaling factor to fit the image within the page
            scale = min(page_width / image_width, page_height / image_height)

            # Calculate the new dimensions of the image
            new_width = image_width * scale
            new_height = image_height * scale

            # Calculate the position to center the image on the page
            x = (page_width - new_width) / 2
            y = (page_height - new_height) / 2

            height = (page_width / image_width) * image_height
            width = page_width
            if height > page_height:
                height = page_height
                width = (page_height / image_height) * image_width

            if image_height < image_width:

                scale = min(page_width / image_height, page_height / image_width)

                # Calculate the new dimensions of the image
                new_width = image_width * scale
                new_height = image_height * scale

                x = (page_height - new_width) / 2
                y = (page_width - new_height) / 2


                width = (page_width / image_height) * image_width
                height = page_width
                if height > page_width:
                    width = page_height
                    height = (page_height / image_width) * image_height
                c.rotate(90)
                c.drawImage(temp_image.name, x, page_width*-1, width=width, height=height)
            else:
                c.drawImage(temp_image.name, x, y, width=width, height=height)
            c.showPage()

        except requests.exceptions.RequestException as e:
            print(f"An error occurred: {e}")
        print(progress_bar(i, int(pages)), end='')
    c.save()


def progress_bar(progress, total):
    done_bar = '■'*int(round(((progress/total)*100)/2))
    rem_bar = '─'*int(round((100-(progress/total)*100)/2))
    print(f'\r|{done_bar}{rem_bar}|', end=' ')
    print(f'{float(progress / total) * 100:.2f}%', end='')
    return



startProgram()
